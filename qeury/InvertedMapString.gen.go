// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import (
	"github.com/kazu/fbshelper/query/base"
	"github.com/kazu/fbshelper/query/log"
)

/*
must call 1 times per Table / struct ( InvertedMapString ) ;
*/

type InvertedMapString struct {
	*base.CommonNode
}

func emptyInvertedMapString() *InvertedMapString {
	return &InvertedMapString{CommonNode: &base.CommonNode{}}
}

var InvertedMapString_IdxToType map[int]int = map[int]int{}
var InvertedMapString_IdxToTypeGroup map[int]int = map[int]int{}
var InvertedMapString_IdxToName map[int]string = map[int]string{}
var InvertedMapString_NameToIdx map[string]int = map[string]int{}

var DUMMP_InvertedMapStringFalse bool = base.SetNameIsStrunct("InvertedMapString", base.ToBool("False"))

func SetInvertedMapStringFields(nName, fName, fType string, fNum int) bool {

	base.RequestSettingNameFields(nName, fName, fType, fNum)

	enumFtype, ok := base.NameToType[fType]
	if ok {
		InvertedMapStringSetIdxToType(fNum, enumFtype)
	}
	//FIXME: basic type only store?

	InvertedMapStringSetIdxToName(fNum, fType)

	grp := InvertedMapStringGetTypeGroup(fType)
	InvertedMapStringSetTypeGroup(fNum, grp)

	InvertedMapString_IdxToName[fNum] = fType

	InvertedMapString_NameToIdx[fName] = fNum
	base.SetNameToIdx("InvertedMapString", InvertedMapString_NameToIdx)

	return true

}
func InvertedMapStringSetIdxToName(i int, s string) {
	InvertedMapString_IdxToName[i] = s

	base.SetIdxToName("InvertedMapString", InvertedMapString_IdxToName)
}

func InvertedMapStringSetIdxToType(k, v int) bool {
	InvertedMapString_IdxToType[k] = v
	base.SetIdxToType("InvertedMapString", InvertedMapString_IdxToType)
	return true
}

func InvertedMapStringSetTypeGroup(k, v int) bool {
	InvertedMapString_IdxToTypeGroup[k] = v
	base.SetdxToTypeGroup("InvertedMapString", InvertedMapString_IdxToTypeGroup)
	return true
}

func InvertedMapStringGetTypeGroup(s string) (result int) {
	return base.GetTypeGroup(s)
}

func (node InvertedMapString) commonNode() *base.CommonNode {
	if node.CommonNode == nil {
		log.Log(log.LOG_WARN, func() log.LogArgs {
			return log.F("CommonNode not found InvertedMapString")
		})
	} else if len(node.CommonNode.Name) == 0 || len(node.CommonNode.IdxToType) == 0 {
		node.CommonNode.Name = "InvertedMapString"
		node.CommonNode.IdxToType = InvertedMapString_IdxToType
		node.CommonNode.IdxToTypeGroup = InvertedMapString_IdxToTypeGroup
	}
	return node.CommonNode
}
func (node InvertedMapString) SearchInfo(pos int, fn base.RecFn, condFn base.CondFn) {

	node.commonNode().SearchInfo(pos, fn, condFn)

}

func (node InvertedMapString) Info() (info base.Info) {

	return node.commonNode().Info()

}

func (node InvertedMapString) IsLeafAt(j int) bool {

	return node.commonNode().IsLeafAt(j)

}

func (node InvertedMapString) CountOfField() int {
	return len(InvertedMapString_IdxToType)
}

func (node InvertedMapString) ValueInfo(i int) base.ValueInfo {
	return node.commonNode().ValueInfo(i)
}

func (node InvertedMapString) FieldAt(idx int) *base.CommonNode {
	return node.commonNode().FieldAt(idx)
}

type InvertedMapStringWithErr struct {
	*InvertedMapString
	Err error
}

func InvertedMapStringSingle(node *InvertedMapString, e error) InvertedMapStringWithErr {
	return InvertedMapStringWithErr{InvertedMapString: node, Err: e}
}

func NewInvertedMapString() *InvertedMapString {
	node := emptyInvertedMapString()
	node.NodeList = &base.NodeList{}
	node.CommonNode.Name = "InvertedMapString"
	node.Init()

	return node
}

func (node InvertedMapString) FieldGroups() map[int]int {
	return InvertedMapString_IdxToTypeGroup
}

func (node InvertedMapString) Root() (Root, error) {
	if !node.InRoot() {
		return Root{}, log.ERR_NO_INCLUDE_ROOT
	}
	root := toRoot(node.Base)
	return root, nil
}
