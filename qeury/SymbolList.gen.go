// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import "github.com/kazu/fbshelper/query/base"

type SymbolList struct { // genny
	*CommonNode
}

// Symbol genny
func NewSymbolList() *SymbolList {

	return emptySymbolList()
}

func emptySymbolList() *SymbolList {
	return &SymbolList{CommonNode: &base.CommonNode{}}
}

func (node SymbolList) At(i int) (result *Symbol, e error) {
	result = &Symbol{}
	result.CommonNode, e = node.CommonNode.At(i)
	return
}

func (node SymbolList) First() (result *Symbol, e error) {
	return node.At(0)
}

func (node SymbolList) Last() (result *Symbol, e error) {
	return node.At(int(node.NodeList.ValueInfo.VLen) - 1)
}

func (node SymbolList) Select(fn func(*Symbol) bool) (result []*Symbol) {
	result = make([]*Symbol, 0, int(node.NodeList.ValueInfo.VLen))
	commons := node.CommonNode.Select(func(cm *CommonNode) bool {
		return fn(&Symbol{CommonNode: cm})
	})
	for _, cm := range commons {
		result = append(result, &Symbol{CommonNode: cm})
	}
	return result
}

func (node SymbolList) Find(fn func(*Symbol) bool) *Symbol {
	result := &Symbol{}
	result.CommonNode = node.CommonNode.Find(func(cm *CommonNode) bool {
		return fn(&Symbol{CommonNode: cm})
	})
	return result
}

func (node SymbolList) All() []*Symbol {
	return node.Select(func(*Symbol) bool { return true })
}

func (node SymbolList) Count() int {
	return int(node.NodeList.ValueInfo.VLen)
}
