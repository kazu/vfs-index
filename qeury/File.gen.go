// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import (
	"github.com/kazu/fbshelper/query/base"
	"github.com/kazu/fbshelper/query/log"
)

/*
must call 1 times per Table / struct ( File ) ;
*/

type File struct {
	*base.CommonNode
}

func emptyFile() *File {
	return &File{CommonNode: &base.CommonNode{}}
}

var File_IdxToType map[int]int = map[int]int{}
var File_IdxToTypeGroup map[int]int = map[int]int{}
var File_IdxToName map[int]string = map[int]string{}
var File_NameToIdx map[string]int = map[string]int{}

var DUMMP_FileFalse bool = base.SetNameIsStrunct("File", base.ToBool("False"))

func SetFileFields(nName, fName, fType string, fNum int) bool {

	base.RequestSettingNameFields(nName, fName, fType, fNum)

	enumFtype, ok := base.NameToType[fType]
	if ok {
		FileSetIdxToType(fNum, enumFtype)
	}
	//FIXME: basic type only store?

	FileSetIdxToName(fNum, fType)

	grp := FileGetTypeGroup(fType)
	FileSetTypeGroup(fNum, grp)

	File_IdxToName[fNum] = fType

	File_NameToIdx[fName] = fNum
	base.SetNameToIdx("File", File_NameToIdx)

	return true

}
func FileSetIdxToName(i int, s string) {
	File_IdxToName[i] = s

	base.SetIdxToName("File", File_IdxToName)
}

func FileSetIdxToType(k, v int) bool {
	File_IdxToType[k] = v
	base.SetIdxToType("File", File_IdxToType)
	return true
}

func FileSetTypeGroup(k, v int) bool {
	File_IdxToTypeGroup[k] = v
	base.SetdxToTypeGroup("File", File_IdxToTypeGroup)
	return true
}

func FileGetTypeGroup(s string) (result int) {
	return base.GetTypeGroup(s)
}

func (node File) commonNode() *base.CommonNode {
	if node.CommonNode == nil {
		log.Log(log.LOG_WARN, func() log.LogArgs {
			return log.F("CommonNode not found File")
		})
	} else if len(node.CommonNode.Name) == 0 || len(node.CommonNode.IdxToType) == 0 {
		node.CommonNode.Name = "File"
		node.CommonNode.IdxToType = File_IdxToType
		node.CommonNode.IdxToTypeGroup = File_IdxToTypeGroup
	}
	return node.CommonNode
}
func (node File) SearchInfo(pos int, fn base.RecFn, condFn base.CondFn) {

	node.commonNode().SearchInfo(pos, fn, condFn)

}

func (node File) Info() (info base.Info) {

	return node.commonNode().Info()

}

func (node File) IsLeafAt(j int) bool {

	return node.commonNode().IsLeafAt(j)

}

func (node File) CountOfField() int {
	return len(File_IdxToType)
}

func (node File) ValueInfo(i int) base.ValueInfo {
	return node.commonNode().ValueInfo(i)
}

func (node File) FieldAt(idx int) *base.CommonNode {
	return node.commonNode().FieldAt(idx)
}

type FileWithErr struct {
	*File
	Err error
}

func FileSingle(node *File, e error) FileWithErr {
	return FileWithErr{File: node, Err: e}
}

func NewFile() *File {
	node := emptyFile()
	node.NodeList = &base.NodeList{}
	node.CommonNode.Name = "File"
	node.Init()

	return node
}

func (node File) FieldGroups() map[int]int {
	return File_IdxToTypeGroup
}

func (node File) Root() (Root, error) {
	if !node.InRoot() {
		return Root{}, log.ERR_NO_INCLUDE_ROOT
	}
	root := toRoot(node.Base)
	return root, nil
}
