// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import "github.com/kazu/fbshelper/query/base"

type IndexNumList struct { // genny
	*CommonNode
}

// IndexNum genny
func NewIndexNumList() *IndexNumList {

	return emptyIndexNumList()
}

func emptyIndexNumList() *IndexNumList {
	return &IndexNumList{CommonNode: &base.CommonNode{}}
}

func (node IndexNumList) At(i int) (result *IndexNum, e error) {
	result = &IndexNum{}
	result.CommonNode, e = node.CommonNode.At(i)
	return
}

func (node IndexNumList) First() (result *IndexNum, e error) {
	return node.At(0)
}

func (node IndexNumList) Last() (result *IndexNum, e error) {
	return node.At(int(node.NodeList.ValueInfo.VLen) - 1)
}

func (node IndexNumList) Select(fn func(*IndexNum) bool) (result []*IndexNum) {
	result = make([]*IndexNum, 0, int(node.NodeList.ValueInfo.VLen))
	commons := node.CommonNode.Select(func(cm *CommonNode) bool {
		return fn(&IndexNum{CommonNode: cm})
	})
	for _, cm := range commons {
		result = append(result, &IndexNum{CommonNode: cm})
	}
	return result
}

func (node IndexNumList) Find(fn func(*IndexNum) bool) *IndexNum {
	result := &IndexNum{}
	result.CommonNode = node.CommonNode.Find(func(cm *CommonNode) bool {
		return fn(&IndexNum{CommonNode: cm})
	})
	return result
}

func (node IndexNumList) All() []*IndexNum {
	return node.Select(func(*IndexNum) bool { return true })
}

func (node IndexNumList) Count() int {
	return int(node.NodeList.ValueInfo.VLen)
}
