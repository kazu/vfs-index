// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import "github.com/kazu/fbshelper/query/base"

type IndexStringList struct { // genny
	*CommonNode
}

// IndexString genny
func NewIndexStringList() *IndexStringList {

	list := emptyIndexStringList()
	list.NodeList = &base.NodeList{}
	list.CommonNode.Name = "[]IndexString"

	list.InitList()
	return list
}

func emptyIndexStringList() *IndexStringList {
	return &IndexStringList{CommonNode: &base.CommonNode{}}
}

func (node IndexStringList) At(i int) (result *IndexString, e error) {
	result = &IndexString{}
	result.CommonNode, e = node.CommonNode.At(i)
	return
}

func (node IndexStringList) SetAt(i int, v *IndexString) error {
	return node.CommonNode.SetAt(i, v.CommonNode)
}

func (node IndexStringList) First() (result *IndexString, e error) {
	return node.At(0)
}

func (node IndexStringList) Last() (result *IndexString, e error) {
	return node.At(int(node.NodeList.ValueInfo.VLen) - 1)
}

func (node IndexStringList) Select(fn func(*IndexString) bool) (result []*IndexString) {
	result = make([]*IndexString, 0, int(node.NodeList.ValueInfo.VLen))
	commons := node.CommonNode.Select(func(cm *CommonNode) bool {
		return fn(&IndexString{CommonNode: cm})
	})
	for _, cm := range commons {
		result = append(result, &IndexString{CommonNode: cm})
	}
	return result
}

func (node IndexStringList) Find(fn func(*IndexString) bool) *IndexString {
	result := &IndexString{}
	result.CommonNode = node.CommonNode.Find(func(cm *CommonNode) bool {
		return fn(&IndexString{CommonNode: cm})
	})
	return result
}

func (node IndexStringList) All() []*IndexString {
	return node.Select(func(*IndexString) bool { return true })
}

func (node IndexStringList) Count() int {
	return int(node.NodeList.ValueInfo.VLen)
}
