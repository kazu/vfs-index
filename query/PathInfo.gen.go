// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import (
	"github.com/kazu/fbshelper/query/base"
	"github.com/kazu/fbshelper/query/log"
)

/*
must call 1 times per Table / struct ( PathInfo ) ;
*/

type PathInfo struct {
	*base.CommonNode
}

func emptyPathInfo() *PathInfo {
	return &PathInfo{CommonNode: &base.CommonNode{}}
}

var PathInfo_IdxToType map[int]int = map[int]int{}
var PathInfo_IdxToTypeGroup map[int]int = map[int]int{}
var PathInfo_IdxToName map[int]string = map[int]string{}
var PathInfo_NameToIdx map[string]int = map[string]int{}

var DUMMP_PathInfoFalse bool = base.SetNameIsStrunct("PathInfo", base.ToBool("False"))

func SetPathInfoFields(nName, fName, fType string, fNum int) bool {

	base.RequestSettingNameFields(nName, fName, fType, fNum)

	enumFtype, ok := base.NameToType[fType]
	if ok {
		PathInfoSetIdxToType(fNum, enumFtype)
	}
	//FIXME: basic type only store?

	PathInfoSetIdxToName(fNum, fType)

	grp := PathInfoGetTypeGroup(fType)
	PathInfoSetTypeGroup(fNum, grp)

	PathInfo_IdxToName[fNum] = fType

	PathInfo_NameToIdx[fName] = fNum
	base.SetNameToIdx("PathInfo", PathInfo_NameToIdx)

	return true

}
func PathInfoSetIdxToName(i int, s string) {
	PathInfo_IdxToName[i] = s

	base.SetIdxToName("PathInfo", PathInfo_IdxToName)
}

func PathInfoSetIdxToType(k, v int) bool {
	PathInfo_IdxToType[k] = v
	base.SetIdxToType("PathInfo", PathInfo_IdxToType)
	return true
}

func PathInfoSetTypeGroup(k, v int) bool {
	PathInfo_IdxToTypeGroup[k] = v
	base.SetdxToTypeGroup("PathInfo", PathInfo_IdxToTypeGroup)
	return true
}

func PathInfoGetTypeGroup(s string) (result int) {
	return base.GetTypeGroup(s)
}

func (node PathInfo) commonNode() *base.CommonNode {
	if node.CommonNode == nil {
		log.Log(log.LOG_WARN, func() log.LogArgs {
			return log.F("CommonNode not found PathInfo")
		})
	} else if len(node.CommonNode.Name) == 0 || len(node.CommonNode.IdxToType) == 0 {
		node.CommonNode.Name = "PathInfo"
		node.CommonNode.IdxToType = PathInfo_IdxToType
		node.CommonNode.IdxToTypeGroup = PathInfo_IdxToTypeGroup
	}
	return node.CommonNode
}
func (node PathInfo) SearchInfo(pos int, fn base.RecFn, condFn base.CondFn) {

	node.commonNode().SearchInfo(pos, fn, condFn)

}

func (node PathInfo) Info() (info base.Info) {

	return node.commonNode().Info()

}

func (node PathInfo) IsLeafAt(j int) bool {

	return node.commonNode().IsLeafAt(j)

}

func (node PathInfo) CountOfField() int {
	return len(PathInfo_IdxToType)
}

func (node PathInfo) ValueInfo(i int) base.ValueInfo {
	return node.commonNode().ValueInfo(i)
}

func (node PathInfo) FieldAt(idx int) *base.CommonNode {
	return node.commonNode().FieldAt(idx)
}

func (src PathInfo) Equal(dst PathInfo) bool {
	for i := 0; i < src.CountOfField(); i++ {
		if !src.FieldAt(i).Equal(dst.FieldAt(i)) {
			return false
		}
	}
	return true
}

type PathInfoWithErr struct {
	*PathInfo
	Err error
}

func PathInfoSingle(node *PathInfo, e error) PathInfoWithErr {
	return PathInfoWithErr{PathInfo: node, Err: e}
}

func NewPathInfo() *PathInfo {
	base.ApplyRequestNameFields()
	node := emptyPathInfo()
	node.NodeList = &base.NodeList{}
	node.CommonNode.Name = "PathInfo"
	node.Init()

	return node
}

func (node PathInfo) FieldGroups() map[int]int {
	return PathInfo_IdxToTypeGroup
}

func (node PathInfo) Root() (Root, error) {
	if !node.InRoot() {
		return Root{}, log.ERR_NO_INCLUDE_ROOT
	}
	root := toRoot(node.IO)
	return root, nil
}
