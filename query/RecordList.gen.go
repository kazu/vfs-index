// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import "github.com/kazu/fbshelper/query/base"

type RecordList struct { // genny
	*CommonNode
}

// Record genny
func NewRecordList() *RecordList {

	list := emptyRecordList()
	list.NodeList = &base.NodeList{}
	list.CommonNode.Name = "[]Record"

	(*base.List)(list.CommonNode).InitList()
	return list
}

func emptyRecordList() *RecordList {
	return &RecordList{CommonNode: &base.CommonNode{}}
}

func (node RecordList) At(i int) (result *Record, e error) {
	result = &Record{}
	result.CommonNode, e = (*base.List)(node.CommonNode).At(i)
	return
}

func (node RecordList) AtWihoutError(i int) (result *Record) {
	result, e := node.At(i)
	if e != nil {
		result = nil
	}
	return
}

func (node RecordList) SetAt(i int, v *Record) error {
	return (*base.List)(node.CommonNode).SetAt(i, v.CommonNode)
}

func (node RecordList) First() (result *Record, e error) {
	return node.At(0)
}

func (node RecordList) Last() (result *Record, e error) {
	return node.At(int(node.NodeList.ValueInfo.VLen) - 1)
}

func (node RecordList) Select(fn func(*Record) bool) (result []*Record) {
	result = make([]*Record, 0, int(node.NodeList.ValueInfo.VLen))
	commons := (*base.List)(node.CommonNode).Select(func(cm *CommonNode) bool {
		return fn(&Record{CommonNode: cm})
	})
	for _, cm := range commons {
		result = append(result, &Record{CommonNode: cm})
	}
	return result
}

func (node RecordList) Find(fn func(*Record) bool) *Record {
	result := &Record{}
	result.CommonNode = (*base.List)(node.CommonNode).Find(func(cm *CommonNode) bool {
		return fn(&Record{CommonNode: cm})
	})
	return result
}

func (node RecordList) All() []*Record {
	return node.Select(func(*Record) bool { return true })
}

func (node RecordList) Count() int {
	return int(node.NodeList.ValueInfo.VLen)
}

func (node RecordList) SwapAt(i, j int) error {
	return (*List)(node.CommonNode).SwapAt(i, j)
}

func (node RecordList) SortBy(less func(i, j int) bool) error {
	return (*List)(node.CommonNode).SortBy(less)
}

// Search ... binary search
func (node RecordList) Search(fn func(*Record) bool) *Record {
	result := &Record{}

	i := (*base.List)(node.CommonNode).SearchIndex(int((*base.List)(node.CommonNode).VLen()), func(cm *CommonNode) bool {
		return fn(&Record{CommonNode: cm})
	})
	if i < int((*base.List)(node.CommonNode).VLen()) {
		result, _ = node.At(i)
	}

	return result
}

func (node RecordList) SearchIndex(fn func(*Record) bool) int {

	i := (*base.List)(node.CommonNode).SearchIndex(int((*base.List)(node.CommonNode).VLen()), func(cm *CommonNode) bool {
		return fn(&Record{CommonNode: cm})
	})
	if i < int((*base.List)(node.CommonNode).VLen()) {
		return i
	}

	return -1
}
