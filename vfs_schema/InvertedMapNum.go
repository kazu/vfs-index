// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package vfs_schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type InvertedMapNum struct {
	_tab flatbuffers.Table
}

func GetRootAsInvertedMapNum(buf []byte, offset flatbuffers.UOffsetT) *InvertedMapNum {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &InvertedMapNum{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *InvertedMapNum) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *InvertedMapNum) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *InvertedMapNum) Key() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *InvertedMapNum) MutateKey(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *InvertedMapNum) Value(obj *Record) *Record {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Record)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func InvertedMapNumStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func InvertedMapNumAddKey(builder *flatbuffers.Builder, key int64) {
	builder.PrependInt64Slot(0, key, 0)
}
func InvertedMapNumAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(value), 0)
}
func InvertedMapNumEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
