// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package vfs_schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KeyRecord struct {
	_tab flatbuffers.Table
}

func GetRootAsKeyRecord(buf []byte, offset flatbuffers.UOffsetT) *KeyRecord {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KeyRecord{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KeyRecord) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KeyRecord) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KeyRecord) Key() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KeyRecord) MutateKey(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *KeyRecord) Records(obj *Record, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 32
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KeyRecord) RecordsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func KeyRecordStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KeyRecordAddKey(builder *flatbuffers.Builder, key uint64) {
	builder.PrependUint64Slot(0, key, 0)
}
func KeyRecordAddRecords(builder *flatbuffers.Builder, records flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(records), 0)
}
func KeyRecordStartRecordsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(32, numElems, 8)
}
func KeyRecordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
