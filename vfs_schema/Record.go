// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package vfs_schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Record struct {
	_tab flatbuffers.Struct
}

func (rcv *Record) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Record) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Record) FileId() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Record) MutateFileId(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Record) Offset() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Record) MutateOffset(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *Record) Size() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *Record) MutateSize(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *Record) OffsetOfValue() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *Record) MutateOffsetOfValue(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func (rcv *Record) ValueSize() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(20))
}
func (rcv *Record) MutateValueSize(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(20), n)
}

func CreateRecord(builder *flatbuffers.Builder, fileId uint64, offset int32, size int32, offsetOfValue int32, valueSize int32) flatbuffers.UOffsetT {
	builder.Prep(8, 24)
	builder.PrependInt32(valueSize)
	builder.PrependInt32(offsetOfValue)
	builder.PrependInt32(size)
	builder.PrependInt32(offset)
	builder.PrependUint64(fileId)
	return builder.Offset()
}
